// <auto-generated />
using System;
using LittleConqueror.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LittleConqueror.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.AuthUserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AuthUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Hash = "$2a$13$1NDyDQsvH4F2GkUqzWlveOWdmW/zEy.d1U3SyXyR8Vz0f.MOnY2F.",
                            Role = "Admin",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.CityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("OsmType")
                        .HasColumnType("character(1)");

                    b.Property<int>("Population")
                        .HasColumnType("integer");

                    b.Property<int?>("TerritoryEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TerritoryEntityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.TerritoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.AuthUserEntity", b =>
                {
                    b.HasOne("LittleConqueror.Infrastructure.Entities.DatabaseEntities.UserEntity", "User")
                        .WithOne("AuthUser")
                        .HasForeignKey("LittleConqueror.Infrastructure.Entities.DatabaseEntities.AuthUserEntity", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.CityEntity", b =>
                {
                    b.HasOne("LittleConqueror.Infrastructure.Entities.DatabaseEntities.TerritoryEntity", null)
                        .WithMany("Cities")
                        .HasForeignKey("TerritoryEntityId");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.TerritoryEntity", b =>
                {
                    b.HasOne("LittleConqueror.Infrastructure.Entities.DatabaseEntities.UserEntity", "Owner")
                        .WithOne("Territory")
                        .HasForeignKey("LittleConqueror.Infrastructure.Entities.DatabaseEntities.TerritoryEntity", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.TerritoryEntity", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("LittleConqueror.Infrastructure.Entities.DatabaseEntities.UserEntity", b =>
                {
                    b.Navigation("AuthUser")
                        .IsRequired();

                    b.Navigation("Territory")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
